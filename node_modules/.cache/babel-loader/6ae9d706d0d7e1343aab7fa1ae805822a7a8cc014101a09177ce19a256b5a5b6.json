{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alammartins\\\\Desktop\\\\sec_words\\\\ProjetosReact\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from \"react\";\n\n// Dados\nimport { wordsList } from \"./data/words\";\n\n//Componentes\nimport StartScreen from \"./Components/StartScreen\";\nimport Game from \"./Components/Game\";\nimport GameOver from \"./Components/GameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\nconst guessesQty = 3;\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]); //Letras Certas\n  const [wrongLetters, setWrongLetters] = useState([]); //Letras Erradas\n  const [guesses, setGuesses] = useState(guessesQty); //Tentativas\n  const [score, setScore] = useState(50);\n  const pickWordAndCategory = useCallback(() => {\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    // console.log(category)\n\n    //pick a random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n    console.log(word);\n    return {\n      word,\n      category\n    };\n  }, [words]);\n\n  // starts the secret word \n  const startGame = useCallback(() => {\n    //Limpando todos os states\n    clearLetterStates();\n\n    // pick word and pick category\n    const {\n      word,\n      category\n    } = pickWordAndCategory();\n\n    // create an array of letters\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map(a => a.toLowerCase());\n    console.log(word, category);\n    console.log(wordLetters);\n\n    // fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n    setGameStage(stages[1].name);\n  }, [pickWordAndCategory]);\n\n  // process the letter input\n  const verifyLetter = letter => {\n    const normalizedLetter = letter.toLowerCase();\n\n    //check if letter has already been utilized\n    if (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return;\n    }\n\n    // push guessed letter or remove a guess - Identificando se a letra está certa/errada\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters(actualGuessedLetters => [...actualGuessedLetters, normalizedLetter]);\n    } else {\n      setWrongLetters(actualWrongLetters => [...actualWrongLetters, normalizedLetter]);\n\n      //Caso a pessoa erre, será diminuído o número de chanecs.o\n      setGuesses(actualGuesses => actualGuesses - 1);\n    }\n  };\n\n  // console.log(\"Certas: \"+guessedLetters)\n  // console.log(\"Erradas: \"+wrongLetters)\n\n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n\n  //Verifica a pontuação, se for 0 finaliza a partida resetando todos os states e setGameStage recebe state de novo jogo\n  useEffect(() => {\n    if (guesses <= 0) {\n      //reset all states\n      clearLetterStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]);\n\n  // verifica condição de vitória\n  useEffect(() => {\n    const uniqueLetters = [...new Set(letters)];\n    if (guessedLetters.length === uniqueLetters.length) {\n      //Adicionar Score\n      setScore(actualScore => actualScore += 100);\n\n      //restart jogo\n      startGame();\n    }\n  }, [guessedLetters, letters, startGame]);\n\n  // reiniciar o jogo\n  const retry = () => {\n    setScore(0);\n    setGuesses(3);\n    setGameStage(stages[0].name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage == 'start' && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 34\n    }, this), gameStage == 'game' && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guesses: guesses,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }, this), gameStage == 'end' && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tMKQzPlhrhNN6exByIoZ6xf2ki8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordsList","StartScreen","Game","GameOver","jsxDEV","_jsxDEV","stages","id","name","guessesQty","App","_s","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guesses","setGuesses","score","setScore","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","word","console","log","startGame","clearLetterStates","wordLetters","split","map","a","toLowerCase","verifyLetter","letter","normalizedLetter","includes","actualGuessedLetters","actualWrongLetters","actualGuesses","uniqueLetters","Set","actualScore","retry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alammartins/Desktop/sec_words/ProjetosReact/src/App.js"],"sourcesContent":["//CSS\nimport './App.css';\n\n// React\nimport {useCallback, useEffect, useState} from \"react\";\n\n// Dados\nimport {wordsList} from \"./data/words\"\n\n//Componentes\nimport StartScreen from \"./Components/StartScreen\"\nimport Game from \"./Components/Game\"\nimport GameOver from \"./Components/GameOver\"\n\nconst stages = [\n  {id: 1, name: \"start\"},\n  {id: 2, name: \"game\"},\n  {id: 3, name: \"end\"},\n]\n\nconst guessesQty = 3\n\nfunction App() {\n\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n\n  const [guessedLetters, setGuessedLetters] = useState([]); //Letras Certas\n  const [wrongLetters, setWrongLetters] = useState([]); //Letras Erradas\n  const [guesses, setGuesses] = useState(guessesQty); //Tentativas\n  const [score, setScore] = useState(50);\n\n  const pickWordAndCategory = useCallback(() => {\n    const categories = Object.keys(words)\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)]\n\n    // console.log(category)\n\n    //pick a random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n\n    console.log(word);\n\n    return {word,category}\n  },[words])\n\n  // starts the secret word \n  const startGame = useCallback(() => {\n    //Limpando todos os states\n    clearLetterStates()\n\n    // pick word and pick category\n    const {word, category} = pickWordAndCategory();\n\n    // create an array of letters\n    let wordLetters = word.split(\"\");\n\n    wordLetters = wordLetters.map((a) => a.toLowerCase())\n\n    console.log(word,category)\n    console.log(wordLetters)\n\n    // fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n\n    setGameStage(stages[1].name);\n  },[pickWordAndCategory])\n\n  // process the letter input\n  const verifyLetter = (letter) => {\n      const normalizedLetter = letter.toLowerCase()\n\n      //check if letter has already been utilized\n    if(\n      guessedLetters.includes(normalizedLetter) ||  \n      wrongLetters.includes(normalizedLetter)\n      ){\n        return;\n      }\n\n      // push guessed letter or remove a guess - Identificando se a letra está certa/errada\n      if(letters.includes(normalizedLetter)){\n          setGuessedLetters((actualGuessedLetters) => [\n            ...actualGuessedLetters,\n            normalizedLetter\n          ])\n      }else{\n        setWrongLetters((actualWrongLetters) => [\n          ...actualWrongLetters,\n          normalizedLetter,\n        ]);\n\n        //Caso a pessoa erre, será diminuído o número de chanecs.o\n        setGuesses((actualGuesses) => actualGuesses - 1);\n\n      }\n    };\n\n    // console.log(\"Certas: \"+guessedLetters)\n    // console.log(\"Erradas: \"+wrongLetters)\n\n    const clearLetterStates = () => {\n      setGuessedLetters([]);\n      setWrongLetters([]);\n    }\n\n    //Verifica a pontuação, se for 0 finaliza a partida resetando todos os states e setGameStage recebe state de novo jogo\n    useEffect(() => {\n      if(guesses <= 0){\n        //reset all states\n        clearLetterStates()\n\n        setGameStage(stages[2].name);\n\n      }\n    },[guesses])\n\n  // verifica condição de vitória\n  useEffect(() => {\n    const uniqueLetters = [... new Set(letters)]\n\n    if(guessedLetters.length === uniqueLetters.length){\n      //Adicionar Score\n      setScore((actualScore) => actualScore += 100)\n\n      //restart jogo\n      startGame();\n\n    }\n\n  },[guessedLetters, letters, startGame])\n\n  // reiniciar o jogo\n  const retry = () => {\n    setScore(0);\n    setGuesses(3);\n    setGameStage(stages[0].name)\n  }\n\n  return (\n    <div className=\"App\">\n       \n        {gameStage == 'start' && <StartScreen startGame={startGame}/>}\n        \n        {gameStage == 'game' && (\n          <Game \n          verifyLetter   = {verifyLetter} \n          pickedWord     = {pickedWord}\n          pickedCategory = {pickedCategory}\n          letters        = {letters}\n          guessedLetters = {guessedLetters}\n          wrongLetters   = {wrongLetters}\n          guesses        = {guesses} \n          score          = {score}\n          />\n        )}\n\n        {gameStage == 'end' && <GameOver retry={retry} score={score}/>}\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}